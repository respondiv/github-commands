## log of every commit ever made

git log


## log of every commit with stats

git log --stat


## press 'q' to quit git log output screen


## compares different versions of file

git diff commit_id_1 commit_id_2


## copy / clone the entire repository (initial ?)

git clone url_of_repository


## changes the settings in git to make it colourful (instead of black and white). The --global will apply the setting to all of the git projects

git config --global color.ui auto


## Switch branches / work / restore previous (any) versions of file

git checkout commit_id


## set sublime text as default editor: -n -> opens in new window; -w -> git waits for us to close sublime before trying to continue

git config --global core.editor "'C:/Program Files/Sublime Text 3/sublime_text.exe' -n -w"


##

git config --global push.default upstream


##

git config --global merge.conflictstyle diff3


## create git repository within a directory

git init


## see the status of the repository

git status


## Add a file to staging area

git add file_name

or 

git add file_name1 file_name2 file_name3


# remove a file from staging area

git reset file_name


# discard any changes either(both) on working directory or staging area (be very careful when running this command)

git reset --hard


# commit the changes and specify commit message (normally do one commit per logical change)

git commit

or (this is shortcut)

git commit -m "Commit Message"


# if you want to compare the files from working directory and staging area (when there is no commit id)

git diff


# if you want to compare the files from staging area and Repository 

git diff --staged


# if you checkout old commit (say to find bug) and made changes to update it on latest version, then run following before adding files to staging area or before commiting

git checkout master


# display the list of brances for repository

git branch


# create a new branch from master

git branch new_branch_name

